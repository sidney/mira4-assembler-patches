<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd">
<chapter id="chap_est">
  <chapterinfo>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="versionfile"/>
    <author>
      <firstname>Bastien</firstname>
      <surname>Chevreux</surname>
      <email>bach@chevreux.org</email>
    </author>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="copyrightfile"/>
  </chapterinfo>
  <blockquote>
    <attribution>Solomon Short</attribution>
    <para>
      <emphasis><quote>Expect the worst. You'll never get disappointed.
      </quote></emphasis>
    </para>
  </blockquote>
  <title>EST / RNASeq assemblies</title>
  <sect1 id="sect1_est_introduction">
    <title>
      Introduction
    </title>
    <para>
      This document is not complete yet and some sections may be a bit
      unclear. I'd be happy to receive suggestions for improvements.
    </para>
    <note>
      <title>
	Some reading requirements
      </title>
      <para>
	This guide assumes that you have basic working knowledge of Unix systems, know
	the basic principles of sequencing (and sequence assembly) and what assemblers
	do.
      </para>
      <para>
	Basic knowledge on mRNA transcription and EST sequences should also be
	present.
      </para>
      <para>
	Please read at some point in time
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    Before the assembly, <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="chap_dataprep"/> to know what to do (or not to
	    do) with the sequencing data before giving it to MIRA.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    For setting up the assembly, <xref xrefstyle="select: label
	    quotedtitle pageabbrev" linkend="chap_denovo"/> to know how to
	    start a denovo assembly (except you obviously will need to change
	    the --job setting from <emphasis>genome</emphasis> to
	    <emphasis>est</emphasis>).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    After the assembly, <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="chap_results"/> to know what to do with the
	    results of the assembly. More specifically, <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="sect_res_looking_at_results"/>, <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="sect_res_first_look:the_assembly_info"/>, <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="sect_res_converting_results"/>, <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="sect_res_filtering_of_results"/> and <xref xrefstyle="select: label quotedtitle
	    pageabbrev" linkend="sect_res_places_of_importance_in_a_de_novo_assembly"/>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    And also <xref xrefstyle="select: label quotedtitle pageabbrev"
	    linkend="chap_reference"/> to look up how manifest files should be
	    written (<xref xrefstyle="select: label quotedtitle pageabbrev"
	    linkend="sect_ref_manifest_basics"/> and <xref xrefstyle="select: label quotedtitle pageabbrev"
	    linkend="sect_ref_manifest_readgroups"/> and <xref xrefstyle="select: label quotedtitle pageabbrev"
	    linkend="sect_ref_manifest_parameters"/>), some command line options as well as general information on
	    what tags MIRA uses in assemblies, files it generates etc.pp
	  </para>
	</listitem>
      </itemizedlist>
    </note>
  </sect1>
  <sect1 id="sect1_est_preliminaries:on_the_difficulties_of_assembling_ests">
    <title>
      Preliminaries: on the difficulties of assembling ESTs
    </title>
    <para>
      Assembling ESTs can be, from an assemblers point of view, pure
      horror. E.g., it may be that some genes have thousands of transcripts
      while other genes have just one single transcript in the sequenced
      data. Furthermore, the presence of 5' and 3' UTR, transcription
      variants, splice variants, homologues, SNPs etc.pp complicates the
      assembly in some rather interesting ways.
    </para>
    <sect2 id="sect2_est_poly-a_tails_in_est_data">
      <title>
	Poly-A tails in EST data
      </title>
      <para>
	Poly-A tails are part of the mRNA and therefore also part of sequenced
	data. They can occur as poly-A or poly-T, depending from which
	direction and which part of the mRNA was sequenced. Having poly-A/T
	tails in the data is a something of a double edged sword. More
	specifically., if the 3' poly-A tail is kept unmasked in the data,
	transcripts having this tail will very probably not align with similar
	transcripts from different splice variants (which is basically
	good). On the other hand, homopolymers (multiple consecutive bases of
	the same type) like poly-As are features that are pretty difficult to
	get correct with today's sequencing technologies, be it Sanger, Solexa
	or, with even more problems problems, 454. So slight errors in the
	poly-A tail could lead to wrongly assigned splice sites ... and
	wrongly split contigs.
      </para>
      <para>
	This is the reason why many people cut off the poly-A tails. Which in
	turn may lead to transcripts from different splice variants being
	assembled together.
      </para>
      <para>
	Either way, it's not pretty.
      </para>
    </sect2>
    <sect2 id="sect2_est_lowly_expressed_transcripts">
      <title>
	Lowly expressed transcripts
      </title>
      <para>
	Single transcripts (or very lowly expressed transcripts) containing
	SNPs, splice variants or similar differences to other, more highly
	expressed transcripts are a problem: it's basically impossible for an
	assembler to distinguish them from reads containing junky data
	(e.g. read with a high error rate or chimeras). The standard setting
	of many EST assemblers and clusterers is therefore to remove these
	reads from the assembly set. MIRA handles things a bit differently:
	depending on the settings, single transcripts with sufficiently large
	differences are either treated as debris or can be saved as
	<emphasis>singlet</emphasis>.
      </para>
    </sect2>
    <sect2 id="sect_est_chimeras">
      <title>
	Chimeras
      </title>
      <para>
	Chimeras are sequences containing adjacent base stretches which are
	not occurring in an organism as sequenced, neither as DNA nor as
	(m)RNA. Chimeras can be created through recombination effects during
	library construction or sequencing. Chimeras can, and often do, lead
	to misassemblies of sequence stretches into one contig although they
	do not belong together. Have a look at the following example where two
	stretches (denoted by <literal>x</literal> and <literal>o</literal>
	are joined by a chimeric read <emphasis>r4</emphasis> containing both
	stretches:
      </para>
      <screen>
r1 xxxxxxxxxxxxxxxx
r2 xxxxxxxxxxxxxxxxx
r3 xxxxxxxxxxxxxxxxx
r4 xxxxxxxxxxxxxxxxxxx|oooooooooooooo
r5                        ooooooooooo
r6                        ooooooooooo
r7                          ooooooooo</screen>
    <para>
      The site of the recombination event is denoted by <literal>x|o</literal>
      in read <emphasis>r4</emphasis>.
    </para>
    <para>
      MIRA does have a chimera detection -- which works very well in genome
      assemblies due to high enough coverage -- by searching for sequence
      stretches which are not covered by overlaps. In the above example, the
      chimera detection routine will almost certainly flag read
      <emphasis>r4</emphasis> as chimera and only use a part of it: either the
      <literal> x</literal> or <literal>o</literal> part, depending on which
      part is longer. There is always a chance that <emphasis>r4</emphasis> is
      a valid read though, but that's a risk to take.
    </para>
    <para>
      Now, that strategy would also work totally fine in EST projects if one
      would not have to account for lowly expressed genes. Imagine the
      following situation:
    </para>
    <screen>
s1 xxxxxxxxxxxxxxxxx
s2         xxxxxxxxxxxxxxxxxxxxxxxxx
s3                          xxxxxxxxxxxxxxx
    </screen>
    <para>
      Look at read <emphasis>s2</emphasis>; from an overlap coverage
      perspective, <emphasis>s2</emphasis> could also very well be a chimera,
      leading to a break of an otherwise perfectly valid contig if
      <emphasis>s2</emphasis> were cut back accordingly. This is why chimera
      detection is switched off by default in MIRA.
    </para>
    <warning>
      <para>
	When starting an EST assembly via the <literal>--job=est,...</literal>
	switch, chimera detection is switched off by default. It is absolutely
	possible to switch on the SKIM chimera detection afterwards via
	<arg>-CL:ascdc</arg>. However, this will have exactly the effects
	described above: chimeras in higher coverage contigs will be detected,
	but perfectly valid low coverage contigs will be torn apart.
      </para>
      <para>
	It is up to you to decide what you want or need.
      </para>
    </warning>
    </sect2>
    <sect2 id="sect2_est_library_normalisation">
      <title>
	Missing library normalisation: very highly expressed transcripts
      </title>
      <para>
	Another interesting problem for de-novo assemblers are non-normalised
	EST libraries. In each cell, the number of mRNA copies per gene may
	differ by several orders of magnitude, from a single transcripts to
	several tens of thousands. Pre-sequencing normalisation is a wet-lab
	procedure to approximately equalise those copy numbers. This can
	however, introduce other artifacts.
      </para>
      <para>
	If an assembler is fed with non-normalised EST data, it may very well
	be that an overwhelming number of the reads comes only from a few
	genes (house-keeping genes). In Sanger sequencing projects this could
	mean a couple of thousand reads per gene. In 454 sequencing projects,
	this can mean several tens of thousands of reads per genes. With
	Solexa data, this number can grow to something close to a million.
      </para>
      <para>
	Several effects then hit a de-novo assembler, the three most annoying
	being (in ascending order of annoyance): a) non-random sequencing
	errors then look like valid SNPs, b) sequencing and library
	construction artefacts start to look like valid sequences if the data
	set was not cleaned "enough" and more importantly, c) an explosion in
	time and memory requirements when attempting to deliver a "good"
	assembly. A sure sign of the latter are messages from MIRA about
	<emphasis>megahubs</emphasis> in the data set.
      </para>
      <note>
	The guide on how to tackle <emphasis>hard</emphasis> projects with
	MIRA gives an overview on how to hunt down sequences which can lead to
	the assembler getting confused, be it sequencing artefacts or highly
	expressed genes.
      </note>
    </sect2>
  </sect1>
  <sect1 id="est_sect1_est_preprocessing">
    <title>
      Preprocessing of ESTs
    </title>
<!--
Appears in HTML, but not in PDF :-(
    <sect1info>
      <authorgroup>
	<author>
	  <firstname>Katrina</firstname>
	  <surname>Dlugosch</surname>
	</author>
	<collab>
	  <collabname>
	    Bastien Chevreux
	  </collabname>
	</collab>
      </authorgroup>
    </sect1info>
-->
    <para>
      With contributions from Katrina Dlugosch
    </para>
    <para>
      EST sequences necessarily contain fragments of vectors or primers used
      to create cDNA libraries from RNA, and may additionally contain primer
      and adaptor sequences used during amplification-based library
      normalisation and/or high-throughput sequencing.  These contaminant
      sequences need to be removed prior to assembly.  MIRA can trim sequences
      by taking contaminant location information from a SSAHA2 or SMALT search
      output, or users can remove contaminants beforehand by trimming
      sequences themselves or masking unwanted bases with lowercase or other
      characters (e.g. 'x', as with <command>cross_match</command>).  Many
      folks use preprocessing trimming/masking pipelines because it can be
      very important to try a variety of settings to verify that you've
      removed all of your contaminants (and fragments thereof) before sending
      them into an assembly program like MIRA.  It can also be good to spend
      some time seeing what contaminants are in your data, so that you get to
      know what quality issues are present and how pervasive.
    </para>
    <para>
      Two features of next generation sequencing can introduce errors into
      contaminant sequences that make them particularly difficult to remove,
      arguing for preprocessing: First, most next-generation sequence
      platforms seem to be sensitive to excess primers present during library
      preparation, and can produce a small percentage of sequences composed
      entirely of concatenated primer fragments.  These are among the most
      difficult contaminants to remove, and the program TagDust (<ulink
      url="http://genome.gsc.riken.jp/osc/english/dataresource/"/>) was
      recently developed specifically to address this problem. Second, 454 EST
      data sets can show high variability within primer sequences designed to
      anchor to polyA tails during cDNA synthesis, because 454 has trouble
      calling the length of the necessary A and T nucleotide repeats with
      accuracy.
    </para>
    <para>
      A variety of programs exist for preprocessing.  Popular ones include
      cross_match (<ulink url="http://www.phrap.org/phredphrapconsed.html"/>)
      for primer masking, and SeqClean (<ulink
      url="http://compbio.dfci.harvard.edu/tgi/software/"/>), Lucy (<ulink
      url="http://lucy.sourceforge.net/"/>), and SeqTrim (<ulink
      url="http://www.scbi.uma.es/cgi-bin/seqtrim/seqtrim_login.cgi"/>) for
      both primer and polyA/T trimming.  The pipeline SnoWhite (<ulink
      url="http://evopipes.net"/>) combines Seqclean and TagDust with custom
      scripts for aggressive sequence and polyA/T trimming (and is tolerant of
      data already masked using cross_match).  In all cases, the user must
      provide contaminant sequence information and adjust settings for how
      sensitive the programs should be to possible matches.  To find the best
      settings, it is helpful to look directly at some of the sequences that
      are being trimmed and inspect them for remaining primer and/or polyA/T
      fragments after cleaning.
    </para>
    <warning>
      When using <command>mira</command> or
      <command>miraSearchESTSNPs</command> with the the simplest parameter
      calls (using the "--job=..." quick switches), the default settings used
      include pretty heavy sequence pre-processing to cope with noisy
      data. Especially if you have your own pre-processing pipeline, you
      <emphasis>must</emphasis> then switch off different clip algorithms that
      you might have applied previously yourself. Especially poly-A clips
      should never be run twice (by your pipeline and by
      <command>mira</command>) as they invariably lead to too many bases being
      cut away in some sequences,
    </warning>
    <note>
      Here too: In some cases MIRA can get confused if something with the
      pre-processing went wrong because, e.g., unexpected sequencing artefacts
      like unknown sequencing vectors or adaptors remain in data. The guide on
      how to tackle <emphasis>hard</emphasis> projects with MIRA gives an
      overview on how to hunt down sequences which can lead to the assembler
      getting confused, be it sequencing artefacts or highly expressed genes.
    </note>
  </sect1>
  <sect1 id="sect1_est_est_difference_assembly_clustering">
    <title>
      The difference between <emphasis>assembly</emphasis> and
      <emphasis>clustering</emphasis>
    </title>
    <para>
      MIRA in its base settings is an <emphasis>assembler</emphasis> and not a
      <emphasis>clusterer</emphasis>, although it can be configured as such. As
      assembler, it will split up read groups into different contigs if it
      thinks there is enough evidence that they come from different RNA
      transcripts.
    </para>
    <sect2 id="sect2_est_snp_splitting">
      <title>
	Splitting transcripts into contigs based on SNPs
      </title>
      <para>
	Imagine this simple case: a gene has two slightly different alleles and you've
	sequenced this:
      </para>
      <screen>
A1-1  ...........T...........
A1-2  ...........T...........
A1-3  ...........T...........
A1-4  ...........T...........
A1-5  ...........T...........
B2-1  ...........G...........
B2-2  ...........G...........
B2-3  ...........G...........
B2-4  ...........G...........
      </screen>
      <para>
	Depending on base qualities and settings used during the assembly
	like, e.g., <arg>-CO:mr:mrpg:mnq:mgqrt:emea:amgb</arg> MIRA will
	recognise that there's enough evidence for a T and also enough
	evidence for a G at that position and create two contigs, one
	containing the "T" allele, one the "G". The consensus will be >99%
	identical, but not 100%.
      </para>
      <para>
	Things become complicated if one has to account for errors in
	sequencing. Imagine you sequenced the following case:
      </para>
      <screen>
A1-1  ...........T...........
A1-2  ...........T...........
A1-3  ...........T...........
A1-4  ...........T...........
A1-5  ...........T...........
B2-1  ...........<emphasis role="bold">G</emphasis>...........
      </screen>
      <para>
	It shows very much the same like the one from above, except that
	there's only one read with a "G" instead of 4 reads. MIRA will, when
	using standard settings, treat this as erroneous base and leave all
	these reads in a contig. It will likewise also not mark it as SNP in
	the results. However, this could also very well be a lowly expressed
	transcript with a single base mutation. It's virtually impossible to
	tell which of the possibilities is right.
      </para>
      <note>
	You can of course force MIRA to mark situations like the one depicted
	above by, e.g., changing the parameters
	for <arg>-CO:mrpg:mnq:mgqrt</arg>. But this may have the side-effect
	that sequencing errors get an increased chance of getting flagged as
	SNP.
      </note>
      <para>
	Further complications arise when SNPs and potential sequencing errors
	meet at the same place. consider the following case:
      </para>
      <screen>
A1-1  ...........T...........
A1-2  ...........T...........
A1-3  ...........T...........
A1-4  ...........T...........
B1-5  ...........T...........
B2-1  ...........G...........
B2-2  ...........G...........
B2-3  ...........G...........
B2-4  ...........G...........
E1-1  ...........<emphasis role="bold">A</emphasis>...........
      </screen>
      <para>
	This example is exactly like the first one, except an additional read
	<literal>E1-1</literal> has made it's appearance and has an "A"
	instead of a "G" or "T". Again it is impossible to tell whether this
	is a sequencing error or a real SNP. MIRA handles these cases in the
	following way: it will recognise two valid read groups (one having a
	"T", the other a "G") and, in assembly mode, split these two groups
	into different contigs. It will also play safe and define that the
	single read <literal>E1-1</literal> will not be attributed to either
	one of the contigs but, if it cannot be assembled to other reads, form
	an own contig ... if need to be even only as single read (a
	<emphasis>singlet</emphasis>).
      </para>
      <note>
	Depending on some settings, singlets may either appear in the regular
	results or end up in the debris file.
      </note>
    </sect2>
    <sect2 id="sect2_est_gap_splitting">
      <title>
	Splitting transcripts into contigs based on larger gaps
      </title>
      <para>
	Gaps in alignments of transcripts are handled very cautiously by
	MIRA. The standard settings will lead to the creation of different
	contigs if three or more consecutive gaps are introduced in an
	alignment. Consider the following example:
      </para>
      <screen>
A1-1  ..........CGA..........
A1-2  ..........*GA..........
A1-3  ..........**A..........
B2-1  ..........<emphasis role="bold">***</emphasis>..........
B2-2  ..........<emphasis role="bold">***</emphasis>..........
      </screen>
      <para>
	Under normal circumstances, MIRA will use the reads
	<literal>A1-1</literal>, <literal>A1-2</literal> and
	<literal>A1-3</literal> to form one contig and put
	<literal>B2-1</literal> and <literal>B2-2</literal> into a separate
	contig. MIRA would do this also if there were only one of the B2
	reads.
      </para>
      <para>
	The reason behind this is that the probability for having gaps of
	three or more bases only due to sequencing errors is pretty
	low. MIRA will therefore treat reads with such attributes as coming
	from different transcripts and not assemble them together, though
	this can be changed using the <arg>-AL:egp:egpl</arg> parameters of
	MIRA if wanted.
      </para>
      <warning>
	<title>
	  Problems with homopolymers, especially in 454 sequencing
	</title>
	<para>
	  As 454 sequencing has a general problem with homopolymers, this rule
	  of MIRA will sometimes lead formation of more contigs than expected
	  due to sequencing errors at "long" homopolymer sites ... where long
	  starts at ~7 bases. Though MIRA does know about the problem in 454
	  homopolymers and has some routines which try to mitigate the
	  problem. this is not always successful.
	</para>
      </warning>
    </sect2>
  </sect1>
  <sect1 id="sect1_est_mira_and_mirasearchestsnps">
    <title>
      mira and miraSearchESTSNPs
    </title>
    <para>
    </para>
    <para>
      The assembly of ESTS can be done in two ways when using the MIRA 4 system: by
      using mira or miraSearchESTSNPs.
    </para>
    <para>
      If one has data from only one strain, mira using the "--job=est"
      quickmode switch is probably the way to go as it's easier to handle.
    </para>
    <para>
      For data from multiple strains where one wants to search SNPs,
      miraSearchESTSNPs is the tool of choice. It's an automated pipeline
      that is able to assemble transcripts cleanly according to given organism
      strains. Afterwards, an integrated SNP analysis highlights the exact nature of
      mutations within the transcripts of different strains.
    </para>
    <sect2 id="sect2_using_mira_for_est_assembly">
      <title>
	Using mira for EST assembly
      </title>
      <para>
	Using mira in EST projects is quite useful to get a first impression of
	a given data set or when used in projects that have no strain or only one
	strain.
      </para>
      <para>
	It is recommended to use 'est' in the <arg>-job=</arg> quick switch to get a
	good initial settings default and then eventually adapt with own settings.
      </para>
      <para>
	Note that by their nature, single transcripts end up in the debris file as
	they do not match any other reads and therefore cannot be aligned.
      </para>
      <para>
	An interesting approach to find differences in multiploid genes is to use the
	result of an "mira --job=est ..." assembly as input for the third step of the
	miraSearchESTSNPs pipeline.
	<!--%Well, some more text needed here ...-->
      </para>
    </sect2>
    <sect2 id="sect2_using_mira_for_est_clustering">
      <title>
	Using mira for EST clustering
      </title>
      <para>
	Like for EST assembly, it is recommended to use 'est' in the
	<arg>-job=</arg> quick switch to get a good initial settings
	default. Then however, one should adapt a couple of switches to get a
	clustering like alignment:
      </para>
      <variablelist>
	<varlistentry>
	  <term>
	    <filename>-AL:egp=no</filename>
	  </term>
	  <listitem>
	    <para>
	      switching off extra gap penalty in alignments allows assembly of
	      transcripts having gap differences of more than 3 bases
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename>-AL:egpl=...</filename>
	  </term>
	  <listitem>
	    <para>
	      In case <arg>-AL:egp</arg> is not switched off, the extra gap
	      penalty level can be fine tuned here.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename>-AL:megpp=...</filename>
	  </term>
	  <listitem>
	    <para>
	      In case <arg>-AL:egp</arg> is not switched off, the maximum
	      extra gap penalty in percentage can be fine tuned here. This
	      allows, together with <arg>-AL:egpl</arg> (see below), to have
	      MIRA accept alignments which are two or three bases longer than
	      the 3 bases rejection criterion of the standard
	      <arg>-AL:egpl=split_on_codongaps</arg> in EST assemblies.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename>-CO:asir=yes</filename>
	  </term>
	  <listitem>
	    <para>
	      This forces MIRA to assume that valid base differences (occurring
	      in several reads) in alignments are SNPs and not repeats/marker
	      bases for different variants. Note that depending on whether you
	      have only one or several strains in your assembly, you might
	      want to enable or disable this feature to allow/disallow
	      clustering of reads from different strains.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename>-CO:mrpg:mnq:mgqrt</filename>
	  </term>
	  <listitem>
	    <para>
	      With these three parameters you can adjust the sensitivity of
	      the repeat / SNP discovery algorithm.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename>-AL:mrs=...</filename>
	  </term>
	  <listitem>
	    <para>
	      When <arg>-CO:asir=no</arg> and <arg>-AL:egp=no</arg>, MIRA has
	      lost two of its most potent tools to not align complete
	      nonsense. In those cases, you should increase the minimum
	      relative score allowed in Smith-Waterman alignments to levels
	      which are higher than the usual MIRA standards. 90 or 95 might
	      be a good start for testing.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename>-CO:rodirs=...</filename>
	  </term>
	  <listitem>
	    <para>
	      Like <arg>-AL:mrs</arg> above, <arg>-CO:rodirs</arg> is a fall-back
	      mechanism to disallow building of completely nonsensical contigs
	      when <arg>-CO:asir=no</arg> and <arg>-AL:egp=no</arg>. You should decrease <arg>-CO:rodirs</arg> to anywhere between 10 and 0.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <para>
	Please look up the complete description of the above mentioned
	parameters in the MIRA reference manual, they're listed here just with
	the <emphasis>why</emphasis> one should change them for a clustering
	assembly.
      </para>
    <note>
      Remember that some of the parameters above can be set independently for
      reads of different sequencing technologies. E.g., when assembling EST
      sequences from <emphasis>Sanger</emphasis> and <emphasis>454</emphasis>
      sequencing technologies, it is absolutely possible to allow the 454
      sequences from having large gaps in alignments (to circumvent the
      homopolymer problem), but to disallow Sanger sequences from having
      them. The parameters would need be set like this:
      <screen>
<prompt>$</prompt> <userinput>mira [...] --job=est,... [...]
  SANGER_SETTINGS -AL:egp=yes:egpl=split_on_codongaps
  454_SETTINGS -AL:egp=no</userinput></screen>
      or in shorter form (as <literal>--job=est</literal> already presets
      <literal>-AL:egp=yes:egpl=split_on_codongaps</literal> for all
      technologies):
      <screen>
<prompt>$</prompt> <userinput>mira [...] --job=est,... [...]
  454_SETTINGS -AL:egp=no</userinput>
      </screen>
    </note>
    </sect2>
    <sect2 id="sect2_using_mirasearchestsnps_for_est_assembly">
      <title>
	Using miraSearchESTSNPs for EST assembly
      </title>
      <para>
	miraSearchESTSNPs is a pipeline that reconstructs the pristine mRNA
	transcript sequences gathered in EST sequencing projects of more than
	one strain, which can be a reliable basis for subsequent analysis
	steps like clustering or exon analysis.  This means that even genes
	that contain only one transcribed SNP on different alleles are first
	treated as different transcripts. The optional last step of the
	assembly process can be configured as a simple clusterer that can
	assemble transcripts containing the same exon sequence -- but only
	differ in SNP positions -- into one consensus sequence. Such SNPs can
	then be analysed, classified and reliably assigned to their
	corresponding mRNA transcriptome sequence. However, it is important to
	note that miraSearchESTSNPs is an assembler and not a full blown
	clustering tool.
      </para>
      <para>
	Generally speaking, miraSearchESTSNPs is a three-stage assembly system
	that was designed to catch SNPs in different strains and reconstruct
	the mRNA present in those strains. That is, one really should have
	different strains to analyse (and the information provided to the
	assembler) to make the most out of miraSearchESTSNPs. Here is a quick
	overview on what miraSearchESTSNPs does:
      </para>
      <orderedlist>
	<listitem>
	  <para>
	    Step 1: assemble everything together, not caring about strain
	    information.  Potential SNPs are not treated as SNPs, but as
	    possible repeat marker bases and are tagged as such (temporarily)
	    to catch each and every possible sequence alignment which might be
	    important later. As a result of this stage, the following
	    information is written out:
	    <orderedlist>
	      <listitem>
		<para>
		  Into <filename>step1_snpsinSTRAIN_&lt;strain_name&gt;.caf</filename>
		  all the sequences of a given strain that are in contigs (can
		  be aligned with at least one other sequence) - also, all
		  sequences that are singlets BUT have been tagged previously
		  as containing tagged bases showing that they aligned
		  previously (even to other strains) but were torn apart due
		  to the SNP bases.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  Into <filename>step1_nosnps_remain.caf</filename> all the
		  remaining singlets.
		</para>
	      </listitem>
	    </orderedlist>
	    Obviously, if one did not provide strain information to the
	    assembly of step 1, all the sequences belong to the same strain
	    (named <emphasis>"default"</emphasis>). The CAF files generated in
	    this step are the input sequences for the next step.
	  </para>
	  <note>
	    If you want to apply clippings to your data (poly-A/T or reading
	    clipping information from SSAHA2 or SMALT), then do this only in
	    step 1! Do not try to re-appply them in step 2 or 3 (or only if
	    you think you have very good reasons to do so. Once loaded and/or
	    applied in step 1, the clipping information is carried on by MIRA
	    to steps 2 and 3.
	  </note>
	</listitem>
	<listitem>
	  <para>
	    Step 2: Now, miraSearchESTSNPs assembles each strain independently
	    from each other.  Again, sequences containing SNPs are torn apart
	    into different contigs (or singlets) to give a clean
	    representation of the "really sequenced" ESTs. In the end, each of
	    the contigs (or singlets) coming out of the assemblies for the
	    strains is a representation of the mRNA that was floating around
	    the given cell/strain/organism. The results of this step are
	    written out into one big file
	    (<filename>step2_reads.caf</filename>) and a new straindata file
	    that goes along with those results
	    (<filename>step2_straindata.txt</filename>).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Step 3: miraSearchESTSNPs takes the result of the previous step
	    (which should now be clean transcripts) and assembles them
	    together, <emphasis>this time</emphasis> allowing transcripts from
	    different strains with different SNP bases to be assembled
	    together. The result is then written to
	    <filename>step3_out.*</filename> files and directories.
	  </para>
	</listitem>
      </orderedlist>
      <para>
      </para>
      <para>
	miraSearchESTSNPs can also be used for EST data of a single strain or
	when no strain information is available. In this case, it will cleanly
	sort out transcripts of almost identical genes or, when eukaryotic
	ESTs are assembled, according to their respective allele when these
	contain mutations.
      </para>
      <para>
	Like the normal mira, miraSearchESTSNPs keeps track on a lot of things
	and writes out quite a lot of additional information files after each
	step.  Results and and additional information of step 1 are stored in
	<filename>step1_*</filename> directories. Results and information of
	step 2 are in <filename>&lt;strain_name&gt;_*</filename>
	directories. For step 3, it's <filename>step3_*</filename> again.
      </para>
      <para>
	Each step of miraSearchESTSNPs can be configured exactly like mira via
	command line parameters.
      </para>
      <para>
	The pipeline of miraSearchESTSNPs is almost as flexible as mira
	itself: if the defaults set by the quick switches are not right for
	your use case, you can change about any parameter you wish via the
	command line. There are only two things which you need to pay
	attention to
      </para>
      <orderedlist>
	<listitem>
	  <para>
	    a straindata file must be present for step 1
	    (<filename>*_straindata_in.txt</filename>), but it can very well
	    be an empty file.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    the naming of the result files is fixed (for all three steps), you
	    cannot change it.
	  </para>
	</listitem>
      </orderedlist>
      <para>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>
      Solving common problems of EST assemblies
    </title>
    <para>
      ... continue here ...
    </para>
    <para>
      Megahubs =&gt; track down reason (high expr, seqvec or adaptor: see
      mira_hard) and eliminate it
    </para>
  </sect1>
</chapter>
