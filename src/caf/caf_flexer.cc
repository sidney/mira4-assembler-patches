#line 2 "caf_flexer.cc"

#line 4 "caf_flexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CAFFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *CAFalloc (yy_size_t  );
void *CAFrealloc (void *,yy_size_t  );
void CAFfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1687] =
    {   0,
        0,    0,   30,   30,   28,   28,    0,    0,    0,    0,
        0,    0,    0,    0,   25,   25,    0,    0,    0,    0,
        0,    0,   61,   59,   57,   59,   59,   58,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   30,   59,
       31,   59,   59,   59,   59,   59,   28,   59,   29,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   27,   27,   26,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   37,   35,   36,   34,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   57,
       44,   44,   44,   43,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   40,   39,
       38,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,   31,   31,    0,    0,    0,    0,
       28,   29,   29,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   27,   26,   26,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,    0,   23,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    0,   42,   44,   43,   44,
       43,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,    0,
        0,    0,    0,    0,    0,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
       32,   33,   33,   33,   33,   33,   33,   33,   12,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       22,   22,   22,   22,   22,   22,   22,   12,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   44,   44,   44,   44,   44,   44,   44,   12,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   41,   41,   41,
       41,   41,   41,   41,   12,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,    0,    0,    0,   15,
        0,    0,    0,    0,    5,    0,    0,    0,    0,    0,
        0,    0,   49,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   45,    0,   20,    0,    0,    0,
        0,    0,   21,    0,    0,    0,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   25,   25,   25,   25,   25,   25,   25,   25,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   47,    0,    0,    0,    8,    0,
        0,    0,    0,    0,    0,   50,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,   46,    0,    0,    7,    0,   13,    0,
        0,    0,    0,   17,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   13,   33,   33,   33,
       33,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   13,   22,   22,
       22,   22,   25,   25,   25,   25,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   13,   44,
       44,   44,   44,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   13,   41,   41,   41,   41,
       53,    0,    0,    0,    0,    0,    3,    0,    0,    0,
        0,   13,    0,   10,    0,    0,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   25,   25,   25,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,    0,    0,    0,    0,    0,    0,   48,    0,
        0,    0,    0,    0,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   25,   25,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,    0,    0,    0,    0,   14,   14,
       16,    6,   18,    0,    0,    0,    0,   33,   33,   33,
       14,   14,   33,   33,   33,   33,   27,   27,   27,   27,
       27,   22,   22,   22,   14,   14,   22,   22,   22,   22,
       25,   44,   44,   44,   14,   14,   44,   44,   44,   44,
       41,   41,   41,   14,   14,   41,   41,   41,   41,    0,
        1,    0,   14,   14,   14,    0,    0,    0,    0,   33,

       33,   14,   14,   33,   33,   33,   33,   27,   27,   27,
       27,   22,   22,   14,   14,   22,   22,   22,   22,   25,
       44,   44,   14,   14,   44,   44,   44,   44,   41,   41,
       14,   14,   41,   41,   41,   41,   52,    0,   19,    0,
       54,   55,   33,   33,   33,   33,   33,   27,   27,   27,
       22,   22,   22,   22,   22,   44,   44,   44,   44,   44,
       41,   41,   41,   41,   41,    2,    0,   33,   27,   22,
       44,   41,    0,   33,   27,   22,   44,   41,    0,   33,
       27,   22,   44,   41,    9,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    7,    1,    1,
        1,    8,    6,    6,    9,    6,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   19,   20,   19,   19,   21,   19,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   19,   19,   19,   19,
        1,    1,    1,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   19,   39,   19,   19,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   19,
       52,   53,    1,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    1,    1,    1,    2,    3,    2,    4,    5,    2,
        3,    2,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        3,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[1702] =
    {   0,
        0,   52,  105,    0,    3,   15,   30,  159,  213,  267,
       40,  320,   85,  374,  428,  482,  536,  590,   95,  644,
       48,  696, 2162, 2163, 2163, 2151, 2108, 2163,    1, 2127,
     2118,    0,   27, 2118,    3,   42,   27, 2114,    4, 2144,
     2143,    6, 2124, 2122,   52,   89,   19, 2140, 2139,    0,
     2139, 2096,   30, 2115, 2106,   39,   70, 2106,   39,   95,
       86, 2102,    0, 2132, 2131, 2089,   86, 2108, 2099,   61,
       81, 2099,   92,  120,  104, 2095, 2163, 2163, 2163, 2163,
     2126, 2083, 2163,   87, 2102, 2093,  119,  100, 2093,  112,
      130,  114, 2089,    0, 2120, 2077,  108, 2096, 2087,  129,

      110, 2087,  138,  149,  157, 2083,  188,    0, 2072,  154,
     2091, 2082,  143,  135, 2082,  164,  183,  167, 2078,  202,
        0, 2108, 2108, 2106, 2064,  160, 2083, 2074,  180,  186,
     2074,  180,  194,  202, 2070,    0, 2101, 2058,  196, 2077,
     2068,  189,  193, 2068,  205,  212,  213, 2064, 2163, 2163,
     2163, 2095, 2052, 2163,  199, 2071, 2062,  232,  205, 2062,
      212,  249,  221, 2058, 2163, 2063, 2059,  212, 2050,  222,
     2083, 2059, 2047, 2062, 2054, 2056,  223, 2072, 2044,  257,
     2050, 2046, 2042,   35, 2163, 2074, 2062, 2066, 2069, 2064,
      288, 2163, 2069,    0,    0, 2043, 2039,  254, 2030,  263,

     2063, 2039, 2027, 2042, 2034, 2036,  265, 2052, 2024,  267,
     2030, 2026, 2022,    0,    0, 2054, 2028, 2024,  265, 2015,
      268, 2048, 2024, 2012, 2027, 2019, 2021,  275, 2037, 2009,
      273, 2015, 2011, 2007,    0,    0, 2014, 2010,  273, 2001,
      288, 2034, 2010, 1998, 2013, 2005, 2007,  289, 2023, 1995,
      283, 2001, 1997, 1993,  335, 2163,    0, 2000, 1996,  298,
     1987,  307, 2020, 1996, 1984, 1999, 1991, 1993,  312, 2009,
     1981,  311, 1987, 1983, 1979,  356, 2163,    0,    0,    0,
     2011, 1985, 1981,  309, 1972,  322, 2005, 1981, 1969, 1984,
     1976, 1978,  323, 1994, 1966,  337, 1972, 1968, 1964,    0,

        0, 1971, 1967,  320, 1958,  329, 1991, 1967, 1955, 1970,
     1962, 1964,  342, 1980, 1952,  354, 1958, 1954, 1950, 1962,
     1954, 1955, 1954, 1953, 1944, 1945,  402, 1955, 1949,  377,
     1952, 1948, 1941, 1947, 1949,  224, 1944, 1938, 1945, 1972,
     1931, 1942, 1945, 1957, 1950, 1955, 1938, 1930, 1931, 1930,
     1929, 1920, 1921,  408, 1931, 1925,  409, 1928, 1924, 1917,
     1923, 1925,  321, 1920, 1914, 1921, 1948, 1907, 1918, 1918,
     1910, 1911, 1910, 1909, 1900, 1901,  414, 1911, 1905,  414,
     1908, 1904, 1897, 1903, 1905,  342, 1900, 1894, 1901, 1928,
     1887, 1898, 1898, 1890, 1891, 1890, 1889, 1880, 1881,  449,

     1891, 1885,  424, 1888, 1884, 1877, 1883, 1885,  368, 1880,
     1874, 1881, 1908, 1867, 1878, 1878, 1870, 1871, 1870, 1869,
     1860, 1861,  461, 1871, 1865, 1868, 1864, 1857, 1863, 1865,
      393, 1860, 1854, 1861, 1888, 1847, 1858, 1858, 1850, 1851,
     1850, 1849, 1840, 1841,  467, 1851, 1845,  480, 1848, 1844,
     1837, 1843, 1845,  396, 1840, 1834, 1841, 1868, 1827, 1838,
     1838, 1830, 1831, 1830, 1829, 1820, 1821,  503, 1831, 1825,
      485, 1828, 1824, 1817, 1823, 1825,  418, 1820, 1814, 1821,
     1848, 1807, 1818,  348, 1807, 1813, 1806,  443, 1802, 1809,
      520,  473, 1798, 1796, 1799, 1795, 1804, 1791, 1802, 1801,

     1800, 1817, 1784, 1797, 1796, 1795, 1788, 2163, 1789, 1793,
     2163,  377, 1785, 1791, 1784,  496, 1780, 1787,  474, 1776,
     1774, 1777, 1773, 1782, 1769, 1780, 1779, 1778, 1795, 1762,
     1775, 1774, 1773, 1766, 1767, 1771,  456, 1763, 1769, 1762,
      503, 1758, 1765, 1754, 1752, 1755, 1751, 1760, 1747, 1758,
     1757, 1756, 1773, 1740, 1753, 1752, 1751, 1744, 1745, 1749,
      472, 1741, 1747, 1740,  504, 1736, 1743,  497, 1732, 1730,
     1733, 1729, 1738, 1725, 1736, 1735, 1734, 1751, 1718, 1731,
     1730, 1729, 1722, 1723, 1727, 1719, 1725, 1718,  517, 1714,
     1721, 1710, 1707, 1718, 1717, 1716, 1715, 1714, 1713, 1706,

     1707, 1711,  505, 1703, 1709, 1702,  525, 1698, 1705,  539,
     1694, 1692, 1695, 1691, 1700, 1687, 1698, 1697, 1696, 1713,
     1680, 1693, 1692, 1691, 1684, 1685, 1689,  507, 1681, 1687,
     1680,  529, 1676, 1683,  555, 1672, 1670, 1673, 1669, 1678,
     1665, 1676, 1675, 1674, 1691, 1658, 1671, 1670, 1669, 1662,
     1663, 1667, 1655, 1664, 1668, 1694, 1664, 1647, 1661, 1655,
       16,  559, 1645, 1645, 1649, 1647, 1657, 1649, 1652, 1640,
     1638, 1645, 1647, 1640, 1639, 1638, 1644, 1646, 1642, 1630,
     1639, 1643, 1669, 1639, 1622, 1636, 1630,  433, 1619, 1616,
     1615, 1610, 1618,   21,   65,   83,  106,  115,  140,  166,

      208,  221,  251,  261,  328,  325,  343,  362,  401,  375,
      373,  402,  411,  554,  409,  433,  439,  447,  459,  491,
      498,  516,  517,  526,  530,  525,  526,  527,  535,  539,
      537,  527,  538,  544,  572,  544,  529,  545,  541,  577,
      534,  536,  542,  543,  555,  549,  554,  549,  549,  558,
      566,  565,  567,  570,  578,  583,  581,  589,  617,  589,
      574,  585,  622,  577,  588,  593,  583,  583,  589,  590,
      591,  599,  603,  601,  591,  602,  608,  636,  608,  593,
      609,  610,  646,  603,  608,  614,  618,  630,  624,  631,
      621,  622,  631,  638,  633,  634,  636,  644,  648,  646,

      636,  647,  653,  681,  653,  638,  654,  650,  687,  642,
      645,  651,  651,  663,  657,  662,  654,  655,  664,  668,
      663,  665,  666,  678,  682,  680,  680,  675,  674, 2163,
      686,  695,  696,  687, 2163,  680,  700,  696,  685,  685,
      700,  693, 2163,  733,  691,  699,  706,  707,  711,  739,
      740,  698,  711,  709,  703,  703,  712,  721,  722,  713,
      706,  726,  722,  711,  711,  726,  719,    0,  759,  717,
      725,  732,  733,  737,  765,  766,  724,  737,  735,  729,
      728,  737,  746,  747,  738,  731,  751,  747,  736,  736,
      751,  744,    0,  784,  742,  750,  757,  758,  762,  790,

      791,  749,  762,  760,  754,  753,  762,  771,  772,  763,
      756,  776,  772,  761,  761,  776,  769,    0,  809,  767,
      775,  782,  783,  787,  815,  816,  774,  787,  784,  793,
      784,  796,  785,    0,  825,  783,  797,  801,  829,  830,
      788,  801,  799,  793,  792,  801,  810,  811,  802,  795,
      815,  811,  800,  800,  815,  808,    0,  848,  806,  814,
      821,  822,  826,  854,  855,  813,  826,  824,  818,  817,
      826,  835,  836,  827,  820,  840,  836,  825,  825,  840,
      833,    0,  873,  831,  839,  846,  847,  851,  879,  880,
      838,  851,  847,  848,  847,  855,  852,  853,  856,  859,

      849,  856,  859,  855, 2163,  858, 2163,  874,  866,  899,
      868,  866, 2163,  888,  872,  874,  869,  870,  869,  877,
      875,  876,  879,  882,  872,  879,  882,  878,    0,  881,
      897,  889,  922,  891,  889,  911,  895,  897,  892,  893,
      892,  900,  898,  899,  902,  905,  895,  902,  905,  901,
        0,  904,  920,  912,  945,  914,  912,  916,  919,  914,
      915,  914,  922,  919,  920,  923,  926,  916,  923,  926,
      922,    0,  925,  941,  933,  966,  935,  933,  955,  939,
      941,  941,  938,  941,  938,  955,  947,  948,  950,  946,
      947,  946,  954,  951,  952,  955,  958,  948,  955,  958,

      954,    0,  957,  973,  965,  998,  967,  965,  987,  971,
      973,  968,  969,  968,  976,  974,  975,  978,  981,  971,
      978,  981,  977,    0,  980,  996,  988, 1021,  990,  988,
     1010,  994,  996,  996,  994, 1003, 1000,  998,  998, 1035,
     1006, 1002, 1009, 1005, 2163, 1013,  997, 1042, 2163, 1045,
     1006, 1016, 1009, 1017, 1050, 2163, 1019, 1017, 1027, 1024,
     1021, 1021, 1058, 1029, 1025, 1032, 1028,    0, 1036, 1020,
     1065, 1068, 1029, 1039, 1032, 1040, 1073,    0, 1042, 1040,
     1050, 1047, 1044, 1044, 1081, 1052, 1048, 1055, 1051,    0,
     1059, 1043, 1088, 1091, 1052, 1062, 1094,    0, 1063, 1061,

     1070, 1067, 1065, 1065, 1102, 1073, 1069, 1076, 1072,    0,
     1080, 1064, 1109, 1112, 1073, 1083, 1076, 1084, 1117,    0,
     1087, 1084, 1121, 1095, 1079, 1126, 1087, 1128,    0, 1097,
     1095, 1104, 1101, 1098, 1099, 1136, 1107, 1103, 1110, 1106,
        0, 1114, 1098, 1143, 1146, 1107, 1117, 1110, 1118, 1151,
        0, 1120, 1118, 1128, 1125, 1122, 1122, 1159, 1130, 1126,
     1133, 1129,    0, 1137, 1121, 1166, 1169, 1130, 1140, 1133,
     1141, 1174,    0, 1133, 1138, 1155, 1152, 1136, 1149, 2163,
     1182, 1134, 1148, 2163, 1147, 1158, 2163, 1189, 1193, 1154,
     1192, 1152, 1149, 2163, 1154, 1160, 1176, 1173, 1157, 1170,

     1203, 1155, 1169,    0, 1168, 1179, 1210, 1175, 1211, 1170,
     1167, 1172, 1177, 1193, 1190, 1174, 1187, 1220, 1172, 1186,
        0, 1185, 1196, 1191, 1226, 1185, 1190, 1206, 1203, 1187,
     1200, 1233, 1185, 1199,    0, 1198, 1209, 1240, 1205, 1241,
     1200, 1197, 1217, 1201, 1218, 1213, 1206, 1211, 1227, 1224,
     1208, 1221, 1254, 1206, 1220,    0, 1219, 1230, 1261, 1226,
     1262, 1221, 1218, 1223, 1228, 1244, 1241, 1225, 1238, 1271,
     1223, 1237,    0, 1236, 1247, 1278, 1243, 1279, 1238, 1235,
     2163, 1254, 1272, 1251, 1237, 1244, 2163, 1255, 1240, 1250,
     1246, 1293, 1265, 2163, 1247, 1263,    0, 1268, 1286, 1265,

     1251, 1258, 1269, 1254, 1264, 1260, 1278, 1259, 1275,    0,
     1280, 1298, 1277, 1263, 1270, 1281, 1266, 1276, 1272, 1290,
        0, 1290, 1308, 1287, 1273, 1280, 1291, 1276, 1286, 1282,
     1300, 1281, 1297, 1282, 1287, 1305,    0, 1305, 1323, 1302,
     1288, 1295, 1306, 1291, 1301, 1297, 1315, 1296, 1312,    0,
     1317, 1335, 1314, 1300, 1307, 1318, 1303, 1313, 1309, 1327,
     1308, 1324, 1313, 1344, 1317, 1360, 1362, 1363, 2163, 1364,
     1320, 1320, 1339, 1327, 1326, 1357, 1330, 1373, 1375, 1376,
        0, 1377, 1333, 1333, 1352, 1340, 1339, 1370, 1343, 1386,
     1388, 1389,    0, 1390, 1346, 1346, 1349, 1381, 1354, 1397,

     1399, 1400,    0, 1401, 1357, 1357, 1376, 1364, 1407, 1364,
     1366, 1397, 1370, 1413, 1416, 1417,    0, 1418, 1374, 1374,
     1394, 1381, 1380, 1411, 1384, 1427, 1429, 1430,    0, 1431,
     1387, 1387, 1406, 1394, 1398, 1438, 1400, 1440, 1442, 1444,
     2163, 2163, 2163, 1403, 1415, 1407, 1408, 1413, 1453, 1415,
     1455, 1457, 1416, 1428, 1419, 1419, 1425, 1465, 1427, 1424,
     1436, 1430, 1470, 1432, 1472, 1474, 1433, 1445, 1436, 1436,
     1438, 1443, 1483, 1445, 1485, 1487, 1446, 1458, 1449, 1449,
     1455, 1495, 1457, 1497, 1499, 1458, 1470, 1461, 1461, 1464,
     2163, 1470, 1508, 1510, 1512, 1514, 1485, 1486, 1487, 1478,

     1484, 1522, 1524, 1526, 1497, 1497, 1497, 1489, 1495, 1533,
     1504, 1493, 1499, 1537, 1539, 1541, 1512, 1512, 1512, 1546,
     1505, 1511, 1549, 1551, 1553, 1524, 1524, 1524, 1516, 1522,
     1560, 1562, 1564, 1535, 1535, 1535, 2163, 1569, 2163, 1526,
     2163, 2163,    0, 1571, 1528,    0,    0,    0, 1573, 1530,
        0, 1575, 1532,    0,    0,    0, 1577, 1534,    0,    0,
        0, 1579, 1536,    0,    0, 2163, 1542, 1543, 1544, 1545,
     1546, 1547, 1545, 1546, 1547, 1548, 1549, 1550, 1593, 1594,
     1595, 1596, 1597, 1598, 2163, 2163, 1602, 1607, 1612, 1617,
     1622, 1627, 1632, 1637, 1642, 1646, 1649, 1653, 1655, 1659,

     1663
    } ;

static yyconst flex_int16_t yy_def[1702] =
    {   0,
     1687, 1687, 1687,    2,    3,    2, 1688, 1688, 1689, 1689,
     1690, 1690, 1691, 1691, 1692, 1692, 1693, 1693, 1694, 1694,
     1695, 1695, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1698, 1698, 1698, 1698, 1698, 1698, 1698,

     1698, 1698, 1698, 1698, 1698, 1698, 1686, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1686,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1696, 1696, 1696, 1696, 1696, 1696, 1696,

     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1686, 1686, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1686, 1686, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701,

     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,

     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,

     1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,

     1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,

     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,

     1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,

     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1698, 1698,

     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1696, 1696, 1696, 1696, 1696, 1696,

     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1699, 1699, 1699, 1699, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1696, 1696, 1696, 1696,

     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1699, 1699, 1699, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698,

     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697,
     1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1699, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1696,

     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697,
     1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1686, 1686, 1686, 1686,
     1686, 1686, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697,
     1698, 1698, 1698, 1698, 1698, 1700, 1700, 1700, 1700, 1700,
     1701, 1701, 1701, 1701, 1701, 1686, 1686, 1696, 1697, 1698,
     1700, 1701, 1686, 1696, 1697, 1698, 1700, 1701, 1686, 1696,
     1697, 1698, 1700, 1701, 1686,    0, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686
    } ;

static yyconst flex_int16_t yy_nxt[2218] =
    {   0,
     1686,   39,   25,   39,   47,  184,   47,  184,   40,   26,
       41,   48, 1686,   49,   45,   27,   47,   24,   47,  835,
      191,  171,  191,   48,   43,   49,   46,   24,  187,   24,
       24,   24,   25,   24,  176,  188,  184,   24,  184,   51,
      167,   78,   79,   78,   80,   52,  836,  168,  177,   81,
      150,  172,  151,   28,   25,   82,  178,  152,  181,  867,
      201,   26,  182,  153,   29,   30,   31,   32,  173,  197,
      206,   33,   34,  174,  187,   35,  198,  179,   36,   37,
       38,  188,  222,   28,  207,   24,   24,   25,   24,  180,
      202,  170,   24,   83,   95,   24,   24,   25,   24,  868,

       96,  154,   24,  178,  137,   28,   39,   25,   39,  208,
      138,  203,  223,   40,   26,   41,  204,  211,  190,   42,
       27,  212,  224,  227,  179,  218,  167,  225,  869,   43,
      209,   44,  219,  168,  229,  232,  180,  228,   28,  233,
      171,  173,  210,  176,  178,  181,  174,  238,   28,  182,
      242,  244,  870,  871,  239,  230,  245,  177,   28,   24,
       24,   25,   24,  249,  263,  179,   24,  231,   51,  247,
      172,   53,   54,   55,   56,  872,  265,  180,   57,   58,
      243,  266,   59,  248,  250,   60,   61,   62,  252,  255,
      256,  255,  253,  259,  264,  268,  251,  270,  273,  283,

      260,  287,  274,  276,  277,  276,  284,  873,  294,  269,
      307,  292,   28,   24,   24,   25,   24,   24,  271,   24,
       24,   64,   26,   65,   24,  293,  314,  289,   66,  295,
      272,  288,  290,  297,  309,  303,  312,  298,  167,  310,
      308,  296,  304,  176,  317,  168,  173,  315,  318,  874,
      313,  174,  181,  171,  503,  322,  182,  177,  323,  316,
      325,  333,  875,  178,  326,  334,   28,   24,   24,   25,
       24,   24,  504,   24,   24,   64,   26,   65,   24,   67,
       68,   69,   70,  172,  179,  876,   71,   72,  337,  191,
       73,  191,  877,   74,   75,   76,  180,  349,  364,  338,

      350,  352,  339,  360,  387,  353,  375,  361,  372,  365,
      376,  373,  366,  383,  410,  388,  395,  384,  389,  396,
       28,   78,   79,   78,   80,  411,  398,  406,  412,   81,
      399,  407,   84,   85,   86,   87,  255,  256,  255,   88,
       89,  418,  432,   90,  419,  421,   91,   92,   93,  422,
      428,  530,  440,  433,  429,  441,  434,  276,  277,  276,
      443,  451,  878,  463,  444,  452,  464,  466,  455,  531,
      879,  467,  554,   83,   24,   24,   25,   24,  880,  456,
      474,   24,  457,   95,  475,  478,   97,   98,   99,  100,
      555,  653,  881,  101,  102,  654,  479,  103,  579,  480,

      104,  105,  106,  491,  830,  491,  492,  882,  494,  491,
      495,  491,  519,  492,  496,  491,  580,  491,  492,  519,
      680,  883,  497,  503,  681,  492,  621,   28,   24,   24,
      107,   24,   24,   24,   24,  884,  835,   26,   24,   24,
      521,  597,  522,  109,  622,  545,  523,  546,  646,  885,
      491,  547,  491,  568,  524,  570,  887,  571,   24,  548,
      568,  572,  491,  861,  491,  492,  647,  658,  491,  573,
      491,  610,  492,  659,  662,  662,  662,  662,  610,  888,
      889,   28,   24,   24,  107,   24,   24,   24,   24,  890,
      891,   26,   24,   24,  110,  111,  112,  113,  662,  706,

      662,  114,  115,  707,  491,  116,  491,  635,  117,  118,
      119,  612,   24,  613,  635,  732,  637,  614,  638,  733,
      685,  491,  639,  491,  492,  615,  686,  711,  737,  892,
      640,  492,  893,  712,  738,   28,   24,   24,  120,   24,
      662,  761,  662,   24,  122,  123,  124,  659,  775,  780,
      801,  125,  776,  806,  802,  781,  662,  835,  662,  807,
      662,  894,  662,  895,  896,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  830,  907,  908,  909,  910,
      835,  912,  913,  914,  886,  915,  916,  917,  918,   28,
       24,   24,  120,   24,  919,  920,  921,   24,  122,  123,

      124,  922,  126,  127,  128,  129,  923,  911,  924,  130,
      131,  925,  926,  132,  927,  928,  133,  134,  135,  829,
      830,  929,  930,  931,  932,  835,  933,  934,  935,  936,
      937,  938,  939,  940,  941,  942,  943,  944,  945,  830,
      946,  947,  948,   28,   24,   24,   25,   24,  949,  835,
      951,   24,  836,  137,  952,  953,  139,  140,  141,  142,
      954,  955,  956,  143,  144,  957,  958,  145,  959,  960,
      146,  147,  148,  961,  962,  963,  950,  964,  965,  966,
      967,  968,  969,  970,  830,  971,  972,  973,  974,  976,
      835,  977,  978,  979,  980,  981,  982,   28,  150,  983,

      151,  984,  985,  986,  987,  152,  988,  989,  155,  156,
      157,  158,  990,  991,  992,  159,  160,  975,  993,  161,
      994,  995,  162,  163,  164,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
     1011, 1012, 1013, 1014, 1014, 1015, 1016, 1017, 1018,  154,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1007, 1031, 1032, 1033, 1034, 1035, 1013, 1014,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1007, 1053, 1054,
     1055, 1056, 1057, 1013, 1014, 1014, 1058, 1059, 1060, 1061,

     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1007, 1074, 1075, 1076, 1077, 1078, 1013, 1014,
     1079, 1080, 1081, 1082, 1083, 1084, 1001, 1085, 1007, 1086,
     1087, 1012, 1013, 1014, 1014, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1007, 1104, 1105, 1106, 1107, 1108, 1013, 1014, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1007, 1126, 1127, 1128,
     1129, 1130, 1013, 1014, 1131, 1132, 1133, 1134, 1135, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,

     1147, 1148, 1149, 1150, 1152, 1153, 1151, 1155, 1156, 1157,
     1158, 1159, 1160, 1154, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1149, 1172, 1174, 1175, 1173,
     1177, 1178, 1179, 1180, 1181, 1182, 1176, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1149, 1194,
     1196, 1197, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1149,
     1214, 1216, 1217, 1215, 1219, 1220, 1221, 1222, 1223, 1224,
     1218, 1225, 1226, 1228, 1229, 1227, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,

     1244, 1149, 1245, 1247, 1248, 1246, 1250, 1251, 1252, 1253,
     1254, 1255, 1249, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
     1263, 1264, 1265, 1266, 1149, 1267, 1269, 1270, 1268, 1272,
     1273, 1274, 1275, 1276, 1277, 1271, 1278, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1288, 1289,
     1291, 1292, 1293, 1294, 1295, 1296, 1289, 1297, 1298, 1299,
     1300, 1280, 1301, 1302, 1303, 1304, 1305, 1306, 1287, 1288,
     1308, 1288, 1307, 1309, 1310, 1311, 1294, 1312, 1313, 1307,
     1314, 1315, 1316, 1317, 1280, 1318, 1319, 1320, 1321, 1322,
     1323, 1287, 1288, 1324, 1288, 1289, 1325, 1294, 1326, 1327,

     1328, 1329, 1289, 1330, 1331, 1280, 1332, 1333, 1334, 1335,
     1336, 1337, 1287, 1288, 1339, 1288, 1338, 1340, 1341, 1342,
     1294, 1343, 1344, 1338, 1280, 1285, 1345, 1288, 1346, 1288,
     1289, 1294, 1347, 1348, 1349, 1350, 1351, 1289, 1352, 1280,
     1353, 1354, 1355, 1356, 1357, 1358, 1287, 1288, 1360, 1288,
     1359, 1361, 1362, 1363, 1294, 1364, 1365, 1359, 1366, 1367,
     1368, 1369, 1280, 1370, 1371, 1372, 1373, 1374, 1375, 1287,
     1288, 1377, 1288, 1376, 1378, 1379, 1380, 1294, 1381, 1382,
     1376, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
     1288, 1393, 1288, 1289, 1392, 1394, 1392, 1395, 1396, 1397,

     1289, 1398, 1399, 1400, 1401, 1402, 1387, 1403, 1404, 1405,
     1406, 1392, 1407, 1392, 1394, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1387, 1416, 1417, 1418, 1419, 1420, 1394,
     1421, 1422, 1423, 1424, 1425, 1426, 1387, 1427, 1428, 1429,
     1430, 1392, 1431, 1392, 1394, 1432, 1433, 1384, 1434, 1435,
     1436, 1437, 1438, 1439, 1440, 1441, 1442, 1387, 1443, 1444,
     1445, 1446, 1392, 1447, 1392, 1394, 1448, 1449, 1450, 1451,
     1452, 1453, 1454, 1455, 1387, 1456, 1457, 1458, 1459, 1392,
     1460, 1392, 1394, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
     1468, 1469, 1470, 1471, 1392, 1472, 1392, 1473, 1474, 1475,

     1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
     1506, 1507, 1508, 1509, 1510, 1472, 1511, 1512, 1513, 1514,
     1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1541, 1542, 1543, 1544, 1545,
     1546, 1540, 1547, 1548, 1549, 1550, 1538, 1551, 1541, 1542,
     1543, 1553, 1554, 1555, 1552, 1556, 1557, 1558, 1559, 1538,
     1539, 1541, 1542, 1543, 1560, 1561, 1562, 1540, 1563, 1564,

     1538, 1565, 1541, 1542, 1543, 1567, 1568, 1569, 1566, 1570,
     1538, 1539, 1571, 1572, 1573, 1574, 1538, 1575, 1540, 1541,
     1542, 1543, 1577, 1578, 1576, 1579, 1580, 1581, 1582, 1583,
     1538, 1584, 1541, 1542, 1543, 1586, 1587, 1588, 1585, 1589,
     1590, 1591, 1592, 1538, 1539, 1593, 1594, 1595, 1595, 1596,
     1597, 1540, 1598, 1540, 1599, 1600, 1591, 1601, 1593, 1602,
     1595, 1603, 1604, 1605, 1606, 1607, 1552, 1608, 1591, 1609,
     1610, 1611, 1612, 1591, 1613, 1593, 1614, 1595, 1615, 1616,
     1617, 1618, 1619, 1566, 1620, 1621, 1591, 1622, 1593, 1623,
     1595, 1624, 1625, 1626, 1627, 1628, 1576, 1629, 1591, 1630,

     1593, 1631, 1595, 1632, 1633, 1634, 1635, 1636, 1585, 1637,
     1638, 1593, 1594, 1593, 1594, 1595, 1595, 1639, 1640, 1540,
     1641, 1540, 1642, 1643, 1644, 1593, 1602, 1595, 1603, 1639,
     1645, 1646, 1647, 1552, 1648, 1649, 1639, 1650, 1651, 1652,
     1593, 1614, 1595, 1615, 1639, 1653, 1654, 1655, 1566, 1639,
     1656, 1657, 1593, 1623, 1595, 1624, 1639, 1658, 1659, 1660,
     1576, 1661, 1662, 1593, 1631, 1595, 1632, 1639, 1663, 1664,
     1665, 1585, 1666, 1667, 1666, 1668, 1666, 1669, 1666, 1670,
     1666, 1671, 1666, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1685, 1685, 1685,

     1685, 1685,   24,   24,   24,   24,   24,   50,   50,   50,
       50,   50,   63,   63,   63,   63,   63,   77,   77,   77,
       77,   77,   94,   94,   94,   94,   94,  108,  108,  108,
      108,  108,  121,  121,  121,  121,  121,  136,  136,  136,
      136,  136,  149,  149,  149,  149,  149,  194,  194,  866,
      194,  214,  865,  214,  235,  235,  864,  235,  257,  257,
      278,  278,  863,  278,  300,  300,  862,  300,  860,  859,
      858,  857,  830,  856,  855,  854,  853,  852,  851,  850,
      849,  848,  847,  846,  845,  844,  843,  842,  841,  840,
      839,  838,  837,  834,  833,  832,  831,  830,  829,  828,

      827,  826,  825,  824,  823,  822,  821,  820,  819,  818,
      817,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      805,  804,  803,  800,  799,  798,  797,  796,  795,  794,
      793,  792,  791,  790,  789,  788,  787,  786,  785,  784,
      783,  782,  779,  778,  777,  774,  773,  772,  771,  770,
      769,  768,  767,  766,  765,  764,  763,  762,  760,  759,
      758,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  744,  743,  742,  741,  740,  739,
      736,  735,  734,  731,  730,  729,  728,  727,  726,  725,
      724,  723,  722,  721,  720,  719,  718,  717,  716,  715,

      714,  713,  710,  709,  708,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  684,  683,  682,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  661,  660,  657,  656,  655,  652,
      651,  508,  650,  649,  648,  645,  644,  643,  642,  641,
      636,  628,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  508,  625,  624,  623,  620,  619,  618,  617,  616,
      611,  603,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  508,  600,  599,  598,  502,  596,  595,  594,  593,

      592,  484,  591,  590,  589,  588,  587,  586,  484,  585,
      584,  508,  583,  582,  581,  578,  577,  576,  575,  574,
      569,  561,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  508,  558,  557,  556,  553,  552,  551,  550,  549,
      544,  537,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  508,  534,  533,  532,  529,  528,  527,  526,  525,
      520,  512,  518,  517,  516,  515,  514,  513,  512,  511,
      511,  511,  511,  510,  509,  508,  507,  506,  505,  502,
      501,  500,  499,  498,  493,  484,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  477,  476,  473,  472,

      471,  470,  469,  468,  465,  462,  461,  460,  459,  458,
      454,  453,  450,  449,  448,  447,  446,  445,  442,  439,
      438,  281,  437,  436,  435,  431,  430,  427,  426,  330,
      425,  424,  423,  420,  417,  416,  415,  414,  413,  409,
      408,  405,  404,  403,  402,  401,  400,  397,  394,  393,
      392,  391,  390,  386,  385,  382,  381,  380,  379,  378,
      377,  374,  371,  370,  216,  369,  368,  367,  363,  362,
      359,  358,  357,  356,  355,  354,  351,  348,  347,  193,
      346,  345,  344,  343,  186,  342,  341,  340,  336,  335,
      332,  331,  330,  329,  328,  327,  324,  321,  320,  183,

      175,  170,  169,  166,  165,  319,  311,  306,  305,  302,
      301,  299,  291,  286,  285,  282,  281,  280,  279,  275,
      267,  262,  261,  258,  254,  246,  241,  240,  237,  236,
      183,  175,  170,  169,  166,  165,  234,  226,  221,  220,
      217,  216,  215,  213,  205,  200,  199,  196,  195,  193,
      192,  190,  189,  186,  185,  183,  175,  170,  169,  166,
      165, 1686,   23, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686
    } ;

static yyconst flex_int16_t yy_chk[2218] =
    {   0,
        0,    4,    1,    4,    5,   39,    5,   39,    4,    1,
        4,    5,    0,    5,    4,    1,    6,    5,    6,  661,
       47,   32,   47,    6,    4,    6,    4,    5,   42,    5,
        7,    7,    7,    7,   35,   42,  184,    7,  184,    7,
       29,   11,   11,   11,   11,    7,  661,   29,   35,   11,
       21,   32,   21,    1,    2,   11,   36,   21,   37,  694,
       56,    2,   37,   21,    2,    2,    2,    2,   33,   53,
       59,    2,    2,   33,   45,    2,   53,   36,    2,    2,
        2,   45,   70,    7,   59,   13,   13,   13,   13,   36,
       56,   45,   13,   11,   13,   19,   19,   19,   19,  695,

       13,   21,   19,   46,   19,    2,    3,    3,    3,   60,
       19,   57,   70,    3,    3,    3,   57,   61,   46,    3,
        3,   61,   71,   73,   46,   67,   84,   71,  696,    3,
       60,    3,   67,   84,   74,   75,   46,   73,   13,   75,
       87,   88,   60,   90,   91,   92,   88,   97,   19,   92,
      100,  101,  697,  698,   97,   74,  101,   90,    3,    8,
        8,    8,    8,  104,  113,   91,    8,   74,    8,  103,
       87,    8,    8,    8,    8,  699,  114,   91,    8,    8,
      100,  114,    8,  103,  104,    8,    8,    8,  105,  107,
      107,  107,  105,  110,  113,  116,  104,  117,  118,  126,

      110,  129,  118,  120,  120,  120,  126,  700,  133,  116,
      142,  132,    8,    9,    9,    9,    9,    9,  117,    9,
        9,    9,    9,    9,    9,  132,  146,  130,    9,  133,
      117,  129,  130,  134,  143,  139,  145,  134,  155,  143,
      142,  133,  139,  161,  147,  155,  159,  146,  147,  701,
      145,  159,  163,  158,  336,  168,  163,  161,  168,  146,
      170,  177,  702,  162,  170,  177,    9,   10,   10,   10,
       10,   10,  336,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,  158,  162,  703,   10,   10,  180,  191,
       10,  191,  704,   10,   10,   10,  162,  198,  210,  180,

      198,  200,  180,  207,  231,  200,  221,  207,  219,  210,
      221,  219,  210,  228,  251,  231,  239,  228,  231,  239,
       10,   12,   12,   12,   12,  251,  241,  248,  251,   12,
      241,  248,   12,   12,   12,   12,  255,  255,  255,   12,
       12,  260,  272,   12,  260,  262,   12,   12,   12,  262,
      269,  363,  284,  272,  269,  284,  272,  276,  276,  276,
      286,  293,  705,  304,  286,  293,  304,  306,  296,  363,
      706,  306,  386,   12,   14,   14,   14,   14,  707,  296,
      313,   14,  296,   14,  313,  316,   14,   14,   14,   14,
      386,  484,  708,   14,   14,  484,  316,   14,  409,  316,

       14,   14,   14,  327,  709,  327,  327,  710,  330,  354,
      330,  354,  354,  327,  330,  377,  409,  377,  377,  354,
      512,  711,  330,  431,  512,  377,  454,   14,   15,   15,
       15,   15,   15,   15,   15,  712,  688,   15,   15,   15,
      357,  431,  357,   15,  454,  380,  357,  380,  477,  713,
      400,  380,  400,  400,  357,  403,  715,  403,   15,  380,
      400,  403,  423,  688,  423,  423,  477,  488,  445,  403,
      445,  445,  423,  488,  492,  519,  492,  519,  445,  716,
      717,   15,   16,   16,   16,   16,   16,   16,   16,  718,
      719,   16,   16,   16,   16,   16,   16,   16,  568,  537,

      568,   16,   16,  537,  468,   16,  468,  468,   16,   16,
       16,  448,   16,  448,  468,  561,  471,  448,  471,  561,
      516,  491,  471,  491,  491,  448,  516,  541,  565,  720,
      471,  491,  721,  541,  565,   16,   17,   17,   17,   17,
      610,  589,  610,   17,   17,   17,   17,  589,  603,  607,
      628,   17,  603,  632,  628,  607,  635,  714,  635,  632,
      662,  722,  662,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  735,  736,  737,  738,  739,
      740,  741,  742,  743,  714,  744,  745,  746,  747,   17,
       18,   18,   18,   18,  748,  749,  750,   18,   18,   18,

       18,  751,   18,   18,   18,   18,  752,  740,  753,   18,
       18,  754,  755,   18,  756,  757,   18,   18,   18,  758,
      759,  760,  761,  762,  764,  763,  765,  766,  767,  768,
      769,  770,  771,  772,  773,  774,  775,  776,  777,  778,
      779,  780,  781,   18,   20,   20,   20,   20,  782,  783,
      784,   20,  763,   20,  785,  786,   20,   20,   20,   20,
      787,  788,  789,   20,   20,  790,  791,   20,  792,  793,
       20,   20,   20,  794,  795,  796,  783,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  808,  810,
      809,  811,  812,  813,  814,  815,  816,   20,   22,  817,

       22,  818,  819,  820,  821,   22,  822,  823,   22,   22,
       22,   22,  824,  825,  826,   22,   22,  809,  827,   22,
      828,  829,   22,   22,   22,  831,  832,  833,  834,  836,
      837,  838,  839,  840,  841,  842,  844,  845,  846,  847,
      848,  849,  850,  851,  851,  852,  853,  854,  855,   22,
      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      866,  867,  869,  870,  871,  872,  873,  874,  875,  876,
      876,  877,  878,  879,  880,  881,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  894,  895,  896,
      897,  898,  899,  900,  901,  901,  902,  903,  904,  905,

      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  919,  920,  921,  922,  923,  924,  925,  926,
      926,  927,  928,  929,  930,  931,  932,  933,  935,  936,
      937,  938,  939,  940,  940,  941,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  958,  959,  960,  961,  962,  963,  964,  965,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  975,
      976,  977,  978,  979,  980,  981,  983,  984,  985,  986,
      987,  988,  989,  990,  990,  991,  992,  993,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1006,

     1008, 1009, 1010, 1011, 1012, 1014, 1011, 1015, 1016, 1017,
     1018, 1019, 1020, 1014, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1034,
     1037, 1038, 1039, 1040, 1041, 1042, 1036, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1056, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1077, 1080, 1081, 1082, 1083, 1084, 1085,
     1079, 1086, 1087, 1088, 1089, 1087, 1090, 1091, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104,

     1105, 1106, 1107, 1108, 1109, 1107, 1110, 1111, 1112, 1113,
     1114, 1115, 1109, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1129, 1132,
     1133, 1134, 1135, 1136, 1137, 1131, 1138, 1139, 1140, 1141,
     1142, 1143, 1144, 1146, 1147, 1148, 1150, 1151, 1150, 1150,
     1152, 1153, 1154, 1155, 1157, 1158, 1150, 1159, 1160, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172,
     1173, 1172, 1172, 1174, 1175, 1176, 1177, 1179, 1180, 1172,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191,
     1192, 1193, 1194, 1195, 1194, 1194, 1196, 1197, 1199, 1200,

     1201, 1202, 1194, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
     1211, 1212, 1213, 1214, 1215, 1214, 1214, 1216, 1217, 1218,
     1219, 1221, 1222, 1214, 1223, 1224, 1225, 1226, 1227, 1226,
     1226, 1228, 1230, 1231, 1232, 1233, 1234, 1226, 1235, 1236,
     1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1245,
     1245, 1247, 1248, 1249, 1250, 1252, 1253, 1245, 1254, 1255,
     1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266,
     1267, 1268, 1267, 1267, 1269, 1270, 1271, 1272, 1274, 1275,
     1267, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1285, 1286,
     1288, 1290, 1288, 1288, 1289, 1291, 1289, 1292, 1293, 1295,

     1288, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1305,
     1306, 1307, 1308, 1307, 1309, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325,
     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336,
     1337, 1338, 1339, 1338, 1340, 1341, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
     1357, 1358, 1359, 1360, 1359, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1374, 1375, 1376,
     1377, 1376, 1378, 1379, 1380, 1382, 1383, 1384, 1385, 1386,
     1388, 1389, 1390, 1391, 1392, 1393, 1392, 1395, 1396, 1398,

     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
     1409, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
     1431, 1432, 1433, 1434, 1435, 1436, 1438, 1439, 1440, 1441,
     1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1451, 1452,
     1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1465, 1466, 1466, 1467, 1468, 1470, 1471, 1472,
     1473, 1466, 1474, 1475, 1476, 1477, 1478, 1478, 1479, 1480,
     1482, 1483, 1484, 1485, 1478, 1486, 1487, 1488, 1489, 1490,
     1490, 1491, 1492, 1494, 1495, 1496, 1497, 1490, 1498, 1499,

     1500, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1500, 1508,
     1509, 1509, 1510, 1511, 1512, 1513, 1514, 1514, 1509, 1515,
     1516, 1518, 1519, 1520, 1514, 1521, 1522, 1523, 1524, 1525,
     1526, 1526, 1527, 1528, 1530, 1531, 1532, 1533, 1526, 1534,
     1535, 1536, 1537, 1538, 1538, 1539, 1539, 1540, 1540, 1544,
     1545, 1538, 1546, 1539, 1547, 1548, 1549, 1550, 1551, 1551,
     1552, 1552, 1553, 1554, 1555, 1556, 1551, 1557, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1565, 1566, 1566, 1567,
     1568, 1569, 1570, 1565, 1571, 1572, 1573, 1574, 1575, 1575,
     1576, 1576, 1577, 1578, 1579, 1580, 1575, 1581, 1582, 1583,

     1584, 1584, 1585, 1585, 1586, 1587, 1588, 1589, 1584, 1590,
     1592, 1593, 1593, 1594, 1594, 1595, 1595, 1596, 1597, 1593,
     1598, 1594, 1599, 1600, 1601, 1602, 1602, 1603, 1603, 1604,
     1605, 1606, 1607, 1602, 1608, 1609, 1610, 1611, 1612, 1613,
     1614, 1614, 1615, 1615, 1616, 1617, 1618, 1619, 1614, 1620,
     1621, 1622, 1623, 1623, 1624, 1624, 1625, 1626, 1627, 1628,
     1623, 1629, 1630, 1631, 1631, 1632, 1632, 1633, 1634, 1635,
     1636, 1631, 1638, 1640, 1644, 1645, 1649, 1650, 1652, 1653,
     1657, 1658, 1662, 1663, 1667, 1668, 1669, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,

     1683, 1684, 1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688,
     1688, 1688, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690,
     1690, 1690, 1691, 1691, 1691, 1691, 1691, 1692, 1692, 1692,
     1692, 1692, 1693, 1693, 1693, 1693, 1693, 1694, 1694, 1694,
     1694, 1694, 1695, 1695, 1695, 1695, 1695, 1696, 1696,  693,
     1696, 1697,  692, 1697, 1698, 1698,  691, 1698, 1699, 1699,
     1700, 1700,  690, 1700, 1701, 1701,  689, 1701,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  660,  659,  658,  657,  656,  655,  654,

      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  634,  633,
      631,  630,  629,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      609,  608,  606,  605,  604,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  567,  566,
      564,  563,  562,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,

      543,  542,  540,  539,  538,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  518,  517,  515,  514,  513,  510,  509,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  490,  489,  487,  486,  485,  483,
      482,  481,  480,  479,  478,  476,  475,  474,  473,  472,
      470,  469,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  453,  452,  451,  450,  449,
      447,  446,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  430,  429,  428,  427,  426,

      425,  424,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  408,  407,  406,  405,  404,
      402,  401,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  385,  384,  383,  382,  381,
      379,  378,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  362,  361,  360,  359,  358,
      356,  355,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  335,
      334,  333,  332,  331,  329,  328,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  315,  314,  312,  311,

      310,  309,  308,  307,  305,  303,  302,  299,  298,  297,
      295,  294,  292,  291,  290,  289,  288,  287,  285,  283,
      282,  281,  275,  274,  273,  271,  270,  268,  267,  266,
      265,  264,  263,  261,  259,  258,  254,  253,  252,  250,
      249,  247,  246,  245,  244,  243,  242,  240,  238,  237,
      234,  233,  232,  230,  229,  227,  226,  225,  224,  223,
      222,  220,  218,  217,  216,  213,  212,  211,  209,  208,
      206,  205,  204,  203,  202,  201,  199,  197,  196,  193,
      190,  189,  188,  187,  186,  183,  182,  181,  179,  178,
      176,  175,  174,  173,  172,  171,  169,  167,  166,  164,

      160,  157,  156,  153,  152,  148,  144,  141,  140,  138,
      137,  135,  131,  128,  127,  125,  124,  123,  122,  119,
      115,  112,  111,  109,  106,  102,   99,   98,   96,   95,
       93,   89,   86,   85,   82,   81,   76,   72,   69,   68,
       66,   65,   64,   62,   58,   55,   54,   52,   51,   49,
       48,   44,   43,   41,   40,   38,   34,   31,   30,   27,
       26,   23, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[61] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "caf_flexer.ll"
#line 7 "caf_flexer.ll"
/*
 * Written by Thomas Pfisterer
 *
 * Copyright (C) 1997-2000 by the German Cancer Research Center (Deutsches
 *   Krebsforschungszentrum, DKFZ Heidelberg) and Thomas Pfisterer
 *
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
 *
 *
 */

using namespace std;

#include <cstdio>

#include "caf_tokens.h"
#if defined(__sgi) && !defined(__GNUC__) && (_MIPS_SIM != _MIPS_SIM_ABI32)
#pragma set woff 1110
#endif

int intcount=0;
int opa=0;










#line 1536 "caf_flexer.cc"

#define INITIAL 0
#define NUMBER_2_TEXT 1
#define NUMBER_4 2
#define IDENT_NUMBER_4 3
#define TAG_MODE 4
#define QUOTED_TEXT 5
#define DNA_MODE 6
#define DNA_SEQ 7
#define QUALITY_MODE 8
#define IDENTIFIER_MODE 9
#define TEXT 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 74 "caf_flexer.ll"


#line 1657 "caf_flexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1687 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2163 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "caf_flexer.ll"
{ BEGIN(NUMBER_4);
		         intcount = 0;
			 return(token_align_SCF); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 80 "caf_flexer.ll"
{ BEGIN(IDENT_NUMBER_4);
		         intcount = 0;
		         return(token_assembled); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "caf_flexer.ll"
{ BEGIN(NUMBER_2_TEXT);
		         intcount = 0;
		         return(token_clone_vector); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 88 "caf_flexer.ll"
{ BEGIN(NUMBER_2_TEXT);
		         intcount = 0;
		         return(token_clipping); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 92 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		         return(token_clone);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 95 "caf_flexer.ll"
{ BEGIN(NUMBER_4);
		         intcount = 2;
		         return(token_insert_size); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 99 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		         return(token_scf_file);   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "caf_flexer.ll"
{ BEGIN(NUMBER_2_TEXT);
		         intcount = 0;
		         return(token_seq_vector);   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 106 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		           return(token_sequencing_vector); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		         return(token_staden_id);  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "caf_flexer.ll"
{ BEGIN(TAG_MODE);
		         intcount = 0;
			 return(token_tag); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 116 "caf_flexer.ll"
{ BEGIN(DNA_MODE);
                         return(token_sequence); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "caf_flexer.ll"
{ BEGIN(IDENTIFIER_MODE);
		         return(token_sequencename); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "caf_flexer.ll"
{ BEGIN(QUALITY_MODE);
		         return(token_quality);   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		         return(token_asped);      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 128 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
			 return(token_base_caller);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		         return(token_template);   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 134 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
		         return(token_ligation);   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 137 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
			 return(token_pstatus);    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "caf_flexer.ll"
{ BEGIN QUOTED_TEXT;
	                 return(token_primer);     }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "caf_flexer.ll"
{ BEGIN(QUOTED_TEXT);
			 return(token_stolen);    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 148 "caf_flexer.ll"
{ BEGIN(DNA_SEQ); return(token_identifier); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 150 "caf_flexer.ll"
{ BEGIN(0); return(token_ende); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 151 "caf_flexer.ll"
{ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 152 "caf_flexer.ll"
{ return(token_identifier); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 155 "caf_flexer.ll"
{ intcount++;
		               BEGIN(NUMBER_2_TEXT);
		               return(token_number); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "caf_flexer.ll"
{ BEGIN(NUMBER_2_TEXT);
		               return(token_identifier); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 161 "caf_flexer.ll"

	YY_BREAK
case 29:
YY_RULE_SETUP
#line 162 "caf_flexer.ll"
{ if (++intcount == 4) BEGIN(0);
  		         return(token_number);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "caf_flexer.ll"

	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "caf_flexer.ll"
{ if (++intcount == 2) BEGIN(QUOTED_TEXT);
  		          return(token_number);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 169 "caf_flexer.ll"

	YY_BREAK
case 33:
YY_RULE_SETUP
#line 173 "caf_flexer.ll"
{ BEGIN(NUMBER_4);
			        return(token_identifier); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 176 "caf_flexer.ll"
{ BEGIN(TEXT); opa = 1; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 177 "caf_flexer.ll"

	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 178 "caf_flexer.ll"
{ yyless(yyleng-1); BEGIN(0); return(token_quoted_text);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 179 "caf_flexer.ll"
{ yymore(); BEGIN(TEXT); opa = 0; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 182 "caf_flexer.ll"
{ yymore(); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 183 "caf_flexer.ll"
{ yyless(yyleng-1-opa);
  	       BEGIN(0); return(token_quoted_text); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 185 "caf_flexer.ll"
{ yymore(); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 188 "caf_flexer.ll"
{ BEGIN(0); return(token_identifier); }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 191 "caf_flexer.ll"
{ BEGIN(0); return(token_ende); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "caf_flexer.ll"
{ return(token_number);     }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "caf_flexer.ll"
{ return(token_identifier); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 199 "caf_flexer.ll"
{ return(token_type_read);   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 200 "caf_flexer.ll"
{ return(token_type_contig); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 201 "caf_flexer.ll"
{ return(token_type_group);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 202 "caf_flexer.ll"
{ return(token_type_assembly); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 203 "caf_flexer.ll"
{ return(token_padded);     }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 204 "caf_flexer.ll"
{ return(token_unpadded);   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 206 "caf_flexer.ll"
{ return(token_dye);        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 207 "caf_flexer.ll"
{ return(token_dye_terminator); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 208 "caf_flexer.ll"
{ return(token_dye_primer); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 211 "caf_flexer.ll"
{ return(token_forward); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 212 "caf_flexer.ll"
{ return(token_reverse); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 213 "caf_flexer.ll"
{ while( yyinput() != '\n'); }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 214 "caf_flexer.ll"

	YY_BREAK
case 58:
YY_RULE_SETUP
#line 215 "caf_flexer.ll"
{ return(token_error); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 216 "caf_flexer.ll"

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NUMBER_2_TEXT):
case YY_STATE_EOF(NUMBER_4):
case YY_STATE_EOF(IDENT_NUMBER_4):
case YY_STATE_EOF(TAG_MODE):
case YY_STATE_EOF(QUOTED_TEXT):
case YY_STATE_EOF(DNA_MODE):
case YY_STATE_EOF(DNA_SEQ):
case YY_STATE_EOF(QUALITY_MODE):
case YY_STATE_EOF(IDENTIFIER_MODE):
case YY_STATE_EOF(TEXT):
#line 217 "caf_flexer.ll"
{ yyterminate();  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 218 "caf_flexer.ll"
ECHO;
	YY_BREAK
#line 2112 "caf_flexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	CAFfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	CAFfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CAFrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CAFrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 54);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1687 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 54;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1687 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1686);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CAFalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CAFalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CAFfree((void *) b->yy_ch_buf  );

	CAFfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)CAFalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CAFrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) CAFalloc(new_size  );

		else
			(yy_start_stack) = (int *) CAFrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CAFalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *CAFrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void CAFfree (void * ptr )
{
	free( (char *) ptr );	/* see CAFrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 218 "caf_flexer.ll"



#if defined(__sgi) && !defined(__GNUC__) && (_MIPS_SIM != _MIPS_SIM_ABI32)
#pragma reset woff 1110
#endif

